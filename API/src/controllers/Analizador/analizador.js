/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,10],$V2=[1,15],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,27],$V7=[1,21],$V8=[1,25],$V9=[1,22],$Va=[1,24],$Vb=[1,23],$Vc=[1,26],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,35],$Vj=[1,37],$Vk=[1,38],$Vl=[2,5,7,16,21,23,24,25,28,33,48,50,51,53,55,57,58,61,62,63,64,65,66],$Vm=[1,68],$Vn=[1,73],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,69],$Vu=[1,66],$Vv=[1,65],$Vw=[1,85],$Vx=[1,86],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[10,25,31,35],$VF=[1,113],$VG=[1,114],$VH=[1,108],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[1,115],$VN=[1,116],$VO=[1,117],$VP=[1,118],$VQ=[1,119],$VR=[1,120],$VS=[1,121],$VT=[1,122],$VU=[8,10,11,32,34,35,56,67,68,69,70,71,72,73,74,75,76,77,80,81],$VV=[1,140],$VW=[8,10,11,32,56,76,77],$VX=[8,10,11,32,34,35,56,67,68,69,70,71,72,73,74,75,76,77],$VY=[10,46],$VZ=[8,10,11,32,34,35,56,67,68,72,73,74,75,76,77],$V_=[8,10,11,32,34,35,56,72,73,74,75,76,77],$V$=[48,55,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"LINS":4,"EOF":5,"INS":6,"PRINT":7,"PARIZ":8,"EXP":9,"PARDER":10,"PTCOMA":11,"DECLARACION":12,"ASIGNACION":13,"FIF":14,"FWHILE":15,"FFOR":16,"FSWITCH":17,"FUNCION":18,"DOWHILE":19,"LLAMADA":20,"FEXEC":21,"FRETURN":22,"BREAK":23,"CONTINUE":24,"ID":25,"PT":26,"ADD":27,"RETURN":28,"FTIPO":29,"IGUAL":30,"CORIZ":31,"CORDER":32,"LIST":33,"MENOR":34,"MAYOR":35,"NEW":36,"Tipo":37,"LISTAVALORES":38,"ENTERO":39,"DOBLE":40,"CARACTER":41,"Cadena":42,"TRUE":43,"FALSE":44,"L_EXP":45,"COMA":46,"LLAVEIZ":47,"LLAVEDER":48,"PARAMETROS":49,"VOID":50,"IF":51,"ELSE":52,"SWITCH":53,"LCASOS":54,"DEFAULT":55,"DOSPT":56,"CASE":57,"WHILE":58,"FOR":59,"CONDICION":60,"DO":61,"INT":62,"DOUBLE":63,"CHAR":64,"BOOLEAN":65,"STRING":66,"MAS":67,"MENOS":68,"POR":69,"DIV":70,"MOD":71,"DIFERENTE":72,"IIGUAL":73,"MAYORIGUAL":74,"MENORIGUAL":75,"AND":76,"OR":77,"NOT":78,"TERNARIO":79,"PLUS":80,"MIN":81,"NATIVAS":82,"FTOLOWER":83,"FTOUPPER":84,"VALORES":85,"FBREAK":86,"FCONTINUE":87,"toLOWER":88,"toUPPER":89,"LENGTH":90,"TRUNCATE":91,"ROUND":92,"TYPEOF":93,"toSTRING":94,"toCharArray":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PRINT",8:"PARIZ",10:"PARDER",11:"PTCOMA",16:"FFOR",21:"FEXEC",23:"BREAK",24:"CONTINUE",25:"ID",26:"PT",27:"ADD",28:"RETURN",30:"IGUAL",31:"CORIZ",32:"CORDER",33:"LIST",34:"MENOR",35:"MAYOR",36:"NEW",37:"Tipo",39:"ENTERO",40:"DOBLE",41:"CARACTER",42:"Cadena",43:"TRUE",44:"FALSE",46:"COMA",47:"LLAVEIZ",48:"LLAVEDER",50:"VOID",51:"IF",52:"ELSE",53:"SWITCH",55:"DEFAULT",56:"DOSPT",57:"CASE",58:"WHILE",60:"CONDICION",61:"DO",62:"INT",63:"DOUBLE",64:"CHAR",65:"BOOLEAN",66:"STRING",67:"MAS",68:"MENOS",69:"POR",70:"DIV",71:"MOD",72:"DIFERENTE",73:"IIGUAL",74:"MAYORIGUAL",75:"MENORIGUAL",76:"AND",77:"OR",78:"NOT",79:"TERNARIO",80:"PLUS",81:"MIN",88:"toLOWER",89:"toUPPER",90:"LENGTH",91:"TRUNCATE",92:"ROUND",93:"TYPEOF",94:"toSTRING",95:"toCharArray"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[6,5],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,7],[6,2],[22,1],[22,2],[12,2],[12,4],[12,9],[12,5],[12,11],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[45,3],[45,1],[45,3],[45,1],[13,3],[13,8],[18,7],[18,8],[18,8],[18,7],[18,3],[18,2],[49,4],[49,2],[14,7],[14,9],[14,11],[14,3],[17,10],[17,7],[17,3],[54,5],[54,4],[15,7],[15,3],[59,11],[59,11],[59,3],[19,9],[19,3],[20,3],[20,4],[29,1],[29,1],[29,1],[29,1],[29,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,1],[9,3],[9,5],[9,2],[9,2],[9,1],[9,4],[9,1],[9,1],[85,1],[85,3],[85,4],[85,6],[86,2],[86,3],[87,2],[87,3],[83,4],[84,4],[82,4],[82,4],[82,4],[82,4],[82,4],[82,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:

                        Arbol.errores.push(new Excepcion(Arbol.errores.length+1, "Sintactico", "No se esperaba  "+yytext+".", yylloc.first_line, yylloc.first_column));
                        Arbol.consola+="\nError Sintactico no se esperaba:  "+yytext+" en la linea "+this._$.first_line+" y columna"+this._$.first_column;
                    
break;
case 3:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 4:
this.$= []; this.$.push($$[$0]);
break;
case 5:
this.$ = new Imprimir.default(this._$.first_line, this._$.first_column, $$[$0-2]); 
break;
case 23:
this.$ = new DECLARAR.default(this._$.first_line, this._$.first_column,$$[$0], $$[$0-1])
break;
case 24:
this.$ = new DECLARAR.default(this._$.first_line, this._$.first_column,$$[$0-2], $$[$0-3],-1,-1, $$[$0])
break;
case 25:
this.$ = new DECLARAR.default(this._$.first_line, this._$.first_column,$$[$0-7], $$[$0-8],$$[$0-1],-1)
break;
case 26:
this.$ = new DECLARAR.default(this._$.first_line, this._$.first_column,$$[$0], $$[$0-3], $$[$0-1],-1,0)
break;
case 27:
this.$ = new DECLARAR.default(this._$.first_line, this._$.first_column,$$[$0-6], $$[$0-9], $$[$0-7],-1,0)
break;
case 28:
this.$ = new Literal.default(this._$.first_line, this._$.first_column, $$[$0], Tipo.tipos.ENTERO)
break;
case 29:
this.$ = new Literal.default(this._$.first_line, this._$.first_column, $$[$0], Tipo.tipos.DOBLE)
break;
case 30:
this.$ = new Literal.default(this._$.first_line, this._$.first_column, $$[$0], Tipo.tipos.CARACTER)
break;
case 31:
this.$ = new Literal.default(this._$.first_line, this._$.first_column, $$[$0], Tipo.tipos.CADENA)
break;
case 32: case 33:
this.$ = new Literal.default(this._$.first_line, this._$.first_column, $$[$0], Tipo.tipos.BOOLEANO)
break;
case 71:
this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.SUMA,this._$.first_line, this._$.first_column, 0
                                                                        , Tipo.tipos.ENTERO, $$[$0-2], $$[$0])
break;
case 72:
this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.RESTA,this._$.first_line, this._$.first_column, 0
                                                                        , Tipo.tipos.ENTERO, $$[$0-2], $$[$0])
break;
case 73:
this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MULTIPLICACION,this._$.first_line, this._$.first_column, 0
                                                                        , Tipo.tipos.ENTERO, $$[$0-2], $$[$0])
break;
case 74:
this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.DIVISION,this._$.first_line, this._$.first_column, 0
                                                                        , Tipo.tipos.ENTERO, $$[$0-2], $$[$0])
break;
case 75:
this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.MODULO,this._$.first_line, this._$.first_column, 0
                                                                        , Tipo.tipos.ENTERO, $$[$0-2], $$[$0])
break;
case 85:
this.$ = new Aritmetica.default(Aritmetica.OperadorAritmetico.RESTA,this._$.first_line, this._$.first_column, 0
                                                                        , Tipo.tipos.ENTERO, $$[$0])
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{1:[3]},{2:$Vi,5:[1,33],6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{5:[1,36],11:$Vj,48:$Vk},o($Vl,[2,4]),{8:[1,39]},{11:[1,40]},{11:[1,41]},o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),{11:[1,42]},{11:[1,43]},{11:[1,44]},{11:[1,45]},{11:[1,46]},{8:[1,50],26:[1,47],30:[1,48],31:[1,49]},{25:[1,51],31:[1,52]},{34:[1,53]},{2:[1,55],8:[1,54]},{2:[1,57],8:[1,56]},{2:[1,59],10:[1,58]},{2:[1,61],25:[1,60]},{2:[1,63],47:[1,62]},{8:$Vm,9:64,11:[2,21],38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},o($VE,[2,66]),o($VE,[2,67]),o($VE,[2,68]),o($VE,[2,69]),o($VE,[2,70]),{1:[2,1]},o($Vl,[2,3]),{11:$Vj,48:$Vk},{1:[2,2]},o($Vl,[2,20]),o($Vl,[2,45]),{8:$Vm,9:87,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),{27:[1,88]},{8:$Vm,9:89,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{31:[1,90]},{10:[1,91],29:93,49:92,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{8:[1,95],11:[2,23],30:[1,94]},{32:[1,96]},{29:97,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{8:$Vm,9:98,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{48:[1,99]},{8:$Vm,9:100,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{48:[1,101]},{8:$Vm,9:102,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{10:[1,103]},{8:[1,104]},{48:[1,105]},{2:$Vi,4:106,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{11:[1,107]},{11:[2,22],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{8:$Vm,9:123,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:124,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},o($VU,[2,86]),{8:$Vm,9:125,29:126,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{79:[1,127]},o($VU,[2,91]),o($VU,[2,93]),o($VU,[2,94]),o($VU,[2,28]),o($VU,[2,29]),o($VU,[2,30]),o($VU,[2,31]),o($VU,[2,32]),o($VU,[2,33]),{8:[1,128]},{8:[1,129]},{8:[1,130]},{8:[1,131]},{8:[1,132]},{8:[1,133]},{8:[1,134]},{8:[1,135]},{10:[1,136],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{8:[1,137]},{11:[2,38],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{8:$Vm,9:138,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{11:[2,64]},{10:[1,139],46:$VV},{25:[1,141]},{8:$Vm,9:142,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{10:[1,143],29:93,49:144,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{25:[1,145]},{35:[1,146]},{10:[1,147],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},o($Vl,[2,51]),{10:[1,148],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},o($Vl,[2,58]),{8:[1,149],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},o($Vl,[2,54]),{10:[1,151],29:93,49:150,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vl,[2,44]),{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,152],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vl,[2,63]),{8:$Vm,9:153,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:154,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:155,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:156,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:157,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:158,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:159,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:160,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:161,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:162,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:163,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:164,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:165,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},o($VU,[2,89]),o($VU,[2,90]),o($VW,[2,84],{34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,80:$VS,81:$VT}),o($VX,[2,85],{80:$VS,81:$VT}),{10:[1,166],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,167]},{8:$Vm,9:168,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:169,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:170,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:171,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:172,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:173,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:174,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:175,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{8:$Vm,9:176,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{11:[1,177]},{8:$Vm,9:178,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{32:[1,179],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{11:[2,65]},{29:180,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($VY,[2,47]),{11:[2,24],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{47:[1,181]},{10:[1,182],46:$VV},{30:[1,183]},{25:[1,184]},{47:[1,185]},{47:[1,186]},{47:[1,187]},{10:[1,188],46:$VV},{47:[1,189]},{58:[1,190]},o($VZ,[2,71],{69:$VJ,70:$VK,71:$VL,80:$VS,81:$VT}),o($VZ,[2,72],{69:$VJ,70:$VK,71:$VL,80:$VS,81:$VT}),o($VX,[2,73],{80:$VS,81:$VT}),o($VX,[2,74],{80:$VS,81:$VT}),o($VX,[2,75],{80:$VS,81:$VT}),o($V_,[2,76],{67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,80:$VS,81:$VT}),o($V_,[2,77],{67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,80:$VS,81:$VT}),o($V_,[2,78],{67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,80:$VS,81:$VT}),o($V_,[2,79],{67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,80:$VS,81:$VT}),o($V_,[2,80],{67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,80:$VS,81:$VT}),o($V_,[2,81],{67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,80:$VS,81:$VT}),o($VW,[2,82],{34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,80:$VS,81:$VT}),o([8,10,11,32,56,77],[2,83],{34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,80:$VS,81:$VT}),o($VU,[2,87]),{8:$Vm,9:191,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{34:$VF,35:$VG,56:[1,192],67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,193],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,194],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,195],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,196],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,197],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,198],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,199],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{10:[1,200],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},o($Vl,[2,5]),{10:[1,201],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{32:[1,202]},{25:[1,203]},{2:$Vi,4:204,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{47:[1,205]},{29:206,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{11:[2,26],30:[1,207]},{2:$Vi,4:208,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$Vi,4:209,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{54:210,57:[1,211]},{47:[1,212]},{2:$Vi,4:213,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{8:[1,214]},o($VX,[2,92],{80:$VS,81:$VT}),{8:$Vm,9:215,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},o($VU,[2,105]),o($VU,[2,106]),o($VU,[2,107]),o($VU,[2,108]),o($VU,[2,109]),o($VU,[2,110]),o($VU,[2,103]),o($VU,[2,104]),{11:[1,216]},{30:[1,217]},o($VY,[2,46]),{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,218],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$Vi,4:219,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{31:[1,220]},{36:[1,221]},{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,222],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,223],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{48:[1,225],55:[1,224],57:[1,226]},{8:$Vm,9:227,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{2:$Vi,4:228,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,229],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{8:$Vm,9:230,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},o([8,10,11,32,56],[2,88],{34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT}),o($Vl,[2,19]),{8:$Vm,9:231,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},o($Vl,[2,40]),{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,232],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{8:$Vm,9:233,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{33:[1,234]},o($Vl,[2,48],{52:[1,235]}),o($Vl,[2,57]),{56:[1,236]},o($Vl,[2,53]),{8:$Vm,9:237,38:67,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,60:$Vt,68:$Vu,78:$Vv,82:70,83:71,84:72,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD},{34:$VF,35:$VG,56:[1,238],67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,239],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vl,[2,43]),{10:[1,240],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{11:[2,39],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},o($Vl,[2,41]),{32:[1,241],34:$VF,35:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{34:[1,242]},{14:243,47:[1,244],51:$V9},{2:$Vi,4:245,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{34:$VF,35:$VG,56:[1,246],67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,80:$VS,81:$VT},{2:$Vi,4:247,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vl,[2,42]),{11:[1,248]},{11:[2,25]},{37:[1,249]},o($Vl,[2,49]),{2:$Vi,4:250,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,251],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},{2:$Vi,4:252,6:4,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($V$,[2,56],{12:6,13:7,14:8,15:9,17:11,18:12,19:13,20:14,22:16,29:20,6:34,2:$Vi,7:$V0,16:$V1,21:$V2,23:$V3,24:$V4,25:$V5,28:$V6,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh}),o($Vl,[2,62]),{35:[1,253]},{2:$Vi,6:34,7:$V0,12:6,13:7,14:8,15:9,16:$V1,17:11,18:12,19:13,20:14,21:$V2,22:16,23:$V3,24:$V4,25:$V5,28:$V6,29:20,33:$V7,48:[1,254],50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh},o($Vl,[2,52]),o($V$,[2,55],{12:6,13:7,14:8,15:9,17:11,18:12,19:13,20:14,22:16,29:20,6:34,2:$Vi,7:$V0,16:$V1,21:$V2,23:$V3,24:$V4,25:$V5,28:$V6,33:$V7,50:$V8,51:$V9,53:$Va,58:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh}),{11:[2,27]},o($Vl,[2,50])],
defaultActions: {33:[2,1],36:[2,2],91:[2,64],139:[2,65],241:[2,25],253:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Excepcion = require('./exceptions/Excepcion');
    const Tipo = require('./tablaSimbolo/tipo');
    const Literal = require('./expresiones/literal');
    const Arbol = require('./tablaSimbolo/ArbolAST');
    const Expresion = require('./expresiones/expresion');
    const Imprimir = require('./Instrucciones/Imprimir');
    const DECLARAR = require('./Instrucciones/DECLARAR');
    const ASIGNAR = require('./Instrucciones/ASIGNAR')
    const Aritmetica = require('./expresiones/aritmetica');
    const Instruccion = require('./Abstract/instruccion');
    let Texto="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:Texto=""; this.begin("Cadena");
break;
case 5:Texto+=yy_.yytext;
break;
case 6:Texto+='\n';
break;
case 7:Texto+="\t";
break;
case 8:Texto+="\"";
break;
case 9:Texto+="\'";
break;
case 10:Texto+="\\";
break;
case 11:yy_.yytext = Texto; this.popState(); return 42;
break;
case 12:return "PRINT";
break;
case 13:return "INT";
break;
case 14:return "DOUBLE";
break;
case 15:return "BOOLEAN";
break;
case 16:return "CHAR";
break;
case 17:return "STRING";
break;
case 18:return "TRUE";
break;
case 19:return "FALSE";
break;
case 20:return "PLUS";
break;
case 21:return "MIN";
break;
case 22:return "DIFERENTE";
break;
case 23:return "IIGUAL";
break;
case 24:return "MAYORIGUAL";
break;
case 25:return "MENORIGUAL";
break;
case 26:return "AND";
break;
case 27:return "OR";
break;
case 28:return "NOT";    
break;
case 29:return "MENOR";
break;
case 30:return "MAYOR";
break;
case 31:return "IGUAL";
break;
case 32:return "TERNARIO";
break;
case 33:return "FOR";
break;
case 34:return "WHILE";
break;
case 35:return "DO";
break;
case 36:return "SWITCH";
break;
case 37:return "IF";
break;
case 38:return "ELSE";
break;
case 39:return "NEW";
break;
case 40:return "RETURN";
break;
case 41:return "CONTINUE";
break;
case 42:return "BREAK";
break;
case 43:return "LIST";
break;
case 44:return "ADD";
break;
case 45:return "CASE";
break;
case 46:return "DEFAULT";
break;
case 47:return "VOID";
break;
case 48:return "LOWER";
break;
case 49:return "UPPER";
break;
case 50:return "LENGTH";
break;
case 51:return "TRUNCATE";
break;
case 52:return "ROUND";
break;
case 53:return "TYPEOF";
break;
case 54:return "TSTRING";
break;
case 55:return "CHARARRAY";
break;
case 56:return "EXEC";
break;
case 57:return "MAS";
break;
case 58:return "MENOS";
break;
case 59:return "POR";
break;
case 60:return "DIV";
break;
case 61:return "MOD";
break;
case 62:return "ELEV";
break;
case 63:return "PARIZ";
break;
case 64:return "PARDER";
break;
case 65:return "CORIZ";
break;
case 66:return "CORDER";
break;
case 67:return "LLAVEIZ";
break;
case 68:return "LLAVEDER";
break;
case 69:return "PTCOMA";
break;
case 70:return "DOSPT"
break;
case 71:return "PT";
break;
case 72:return "DOBLE";
break;
case 73:return "ENTERO";
break;
case 74:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return "CARACTER";
break;
case 75:return "ID";
break;
case 76:return "COMA";
break;
case 77:return 5;
break;
case 78:
            Arbol.errores.push(new Excepcion(Arbol.errores.length+1, "LEXICO", "Símbolo "+yy_.yytext+" no reconocido.", yy_.yylloc.first_line, yy_.yylloc.first_column)); 
            Arbol.consola+='\nError léxico: Símbolo ' + yy_.yytext + ' no reconocido, en la linea: ' + yy_.yylloc.first_line + 'y columna: ' + yy_.yylloc.first_column;
        
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\")/i,/^(?:\\\\')/i,/^(?:\\\\)/i,/^(?:["])/i,/^(?:PRINT\b)/i,/^(?:INT\b)/i,/^(?:DOUBLE\b)/i,/^(?:BOOLEAN\b)/i,/^(?:CHAR\b)/i,/^(?:STRING\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:FOR\b)/i,/^(?:WHILE\b)/i,/^(?:DO\b)/i,/^(?:SWITCH\b)/i,/^(?:IF\b)/i,/^(?:ELSE\b)/i,/^(?:NEW\b)/i,/^(?:RETURN\b)/i,/^(?:CONTINUE\b)/i,/^(?:BREAK\b)/i,/^(?:LIST\b)/i,/^(?:ADD\b)/i,/^(?:CASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:VOID\b)/i,/^(?:toLOWER\b)/i,/^(?:toUPPER\b)/i,/^(?:Length\b)/i,/^(?:Truncate\b)/i,/^(?:Round\b)/i,/^(?:Typeof\b)/i,/^(?:toSTRING\b)/i,/^(?:toCharArray\b)/i,/^(?:Exec\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:'[A-Za-z]?')/i,/^(?:[A-Za-z]([A-Za-z]|[0-9]|[_])*)/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"Cadena":{"rules":[5,6,7,8,9,10,11],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}